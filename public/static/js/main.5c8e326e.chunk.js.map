{"version":3,"sources":["routes/RouterList.ts","components/Route/PrivateRoute.tsx","routes/Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Name","PrivateRoute","children","rest","isLogin","localStorage","getItem","render","location","to","pathname","state","from","Home","lazy","Panel","Login","ShowArticle","ShowUser","path","exact","auth","component","Routers","fallback","routes","map","route","index","key","App","id","className","CssBaseline","Router","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c8e326e.chunk.js","sourcesContent":["import { lazy } from \"react\";\nconst Home = lazy(() => import('pages/Home'));\nconst Panel = lazy(() => import('pages/Panel'));\nconst Login = lazy(() => import('pages/Login'));\nconst ShowArticle = lazy(() => import('pages/ShowArticle'));\nconst ShowUser = lazy(() => import('pages/ShowUser'));\n\nexport enum Name {\n  Home = '/',\n  Login = '/login',\n  Panel = '/Panel',\n  ShowArticle = '/article/:id/',\n  ShowUser =  '/articles/user/:name/'\n}\n\nexport default [\n  {\n    path: Name.Home,\n    exact: true,\n    auth: false,\n    component: Home,\n  },\n  {\n    path: Name.Login,\n    exact: true,\n    auth: false,\n    component: Login,\n  },\n  {\n    path: Name.Panel,\n    exact: true,\n    auth: true,\n    component: Panel,\n  },\n  {\n    path: Name.ShowArticle,\n    exact: true,\n    auth: false,\n    component: ShowArticle,\n  },\n  {\n    path: Name.ShowUser,\n    exact: true,\n    auth: false,\n    component: ShowUser,\n  },\n];\n","import React from 'react';\nimport { Redirect, Route,RouteProps } from \"react-router-dom\";\n\n\n\n\nconst PrivateRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\n    const isLogin = localStorage.getItem(\"api_token\") ? true : false\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                isLogin ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    )\n}\n\nexport default PrivateRoute;","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from 'components/Route/PrivateRoute'\n\n\n\nimport routes from './RouterList'\n\nconst Routers: React.SFC = () => (\n  <Router>\n      <Suspense fallback={<div>≈Åadowanie!</div>}>\n        <Switch>\n          {routes.map((route, index) => (\n            // You can render a <Route> in as many places\n            // as you want in your app. It will render along\n            // with any other <Route>s that also match the URL.\n            // So, a sidebar or breadcrumbs or anything else\n            // that requires you to render multiple things\n            // in multiple places at the same URL is nothing\n            // more than multiple <Route>s.\n            route.auth ?\n              <PrivateRoute\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.component />}\n              />\n              :\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.component />}\n              />\n\n          ))}\n        </Switch>\n      </Suspense>\n  </Router>\n)\n\n\n\nexport default Routers;\n","import React from 'react';\nimport Router from './routes/Router'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\n\n\nfunction App() {\n  return (\n    <div id=\"App\" className=\"App\">\n        <CssBaseline/>\n        <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}